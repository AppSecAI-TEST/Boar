package com.join.greenDaoUtils;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORAGE".
*/
public class StorageDao extends AbstractDao<Storage, Void> {

    public static final String TABLENAME = "STORAGE";

    /**
     * Properties of entity Storage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Color = new Property(0, String.class, "color", false, "COLOR");
        public final static Property Smell = new Property(1, String.class, "smell", false, "SMELL");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Number = new Property(4, String.class, "number", false, "NUMBER");
        public final static Property Operator = new Property(5, String.class, "operator", false, "OPERATOR");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Density = new Property(7, String.class, "density", false, "DENSITY");
        public final static Property Vitality = new Property(8, String.class, "vitality", false, "VITALITY");
        public final static Property MotilityRate = new Property(9, String.class, "motilityRate", false, "MOTILITY_RATE");
        public final static Property Copies = new Property(10, String.class, "copies", false, "COPIES");
        public final static Property Add = new Property(11, String.class, "add", false, "ADD");
        public final static Property Result = new Property(12, String.class, "result", false, "RESULT");
    }


    public StorageDao(DaoConfig config) {
        super(config);
    }
    
    public StorageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORAGE\" (" + //
                "\"COLOR\" TEXT," + // 0: color
                "\"SMELL\" TEXT," + // 1: smell
                "\"DATE\" TEXT," + // 2: date
                "\"TIME\" TEXT," + // 3: time
                "\"NUMBER\" TEXT," + // 4: number
                "\"OPERATOR\" TEXT," + // 5: operator
                "\"TYPE\" TEXT," + // 6: type
                "\"DENSITY\" TEXT," + // 7: density
                "\"VITALITY\" TEXT," + // 8: vitality
                "\"MOTILITY_RATE\" TEXT," + // 9: motilityRate
                "\"COPIES\" TEXT," + // 10: copies
                "\"ADD\" TEXT," + // 11: add
                "\"RESULT\" TEXT);"); // 12: result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Storage entity) {
        stmt.clearBindings();
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(1, color);
        }
 
        String smell = entity.getSmell();
        if (smell != null) {
            stmt.bindString(2, smell);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(6, operator);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String density = entity.getDensity();
        if (density != null) {
            stmt.bindString(8, density);
        }
 
        String vitality = entity.getVitality();
        if (vitality != null) {
            stmt.bindString(9, vitality);
        }
 
        String motilityRate = entity.getMotilityRate();
        if (motilityRate != null) {
            stmt.bindString(10, motilityRate);
        }
 
        String copies = entity.getCopies();
        if (copies != null) {
            stmt.bindString(11, copies);
        }
 
        String add = entity.getAdd();
        if (add != null) {
            stmt.bindString(12, add);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(13, result);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Storage entity) {
        stmt.clearBindings();
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(1, color);
        }
 
        String smell = entity.getSmell();
        if (smell != null) {
            stmt.bindString(2, smell);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(6, operator);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String density = entity.getDensity();
        if (density != null) {
            stmt.bindString(8, density);
        }
 
        String vitality = entity.getVitality();
        if (vitality != null) {
            stmt.bindString(9, vitality);
        }
 
        String motilityRate = entity.getMotilityRate();
        if (motilityRate != null) {
            stmt.bindString(10, motilityRate);
        }
 
        String copies = entity.getCopies();
        if (copies != null) {
            stmt.bindString(11, copies);
        }
 
        String add = entity.getAdd();
        if (add != null) {
            stmt.bindString(12, add);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(13, result);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Storage readEntity(Cursor cursor, int offset) {
        Storage entity = new Storage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // color
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // smell
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // operator
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // density
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vitality
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // motilityRate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // copies
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // add
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Storage entity, int offset) {
        entity.setColor(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSmell(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOperator(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDensity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVitality(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMotilityRate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCopies(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAdd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setResult(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Storage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Storage entity) {
        return null;
    }

    @Override
    public boolean hasKey(Storage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
